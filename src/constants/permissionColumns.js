import React from 'react';
import Avatar from '@mui/material/Avatar';
import CheckIcon from '@mui/icons-material/Check';
import CloseIcon from '@mui/icons-material/Close';

export const permissionColumns = [
    { field: 'title', renderHeader: () => <strong>Title</strong>, width: 200 },
    { field: 'appId', renderHeader: () => <strong>App ID</strong>, width: 150 },
    { field: 'icon', renderHeader: () => <strong>Icon</strong>, width: 100, renderCell: (params) => <Avatar src={params.value} alt="Icon" /> },
    { field: 'developer', renderHeader: () => <strong>Developer</strong>, width: 150 },
    { field: 'currency', renderHeader: () => <strong>Currency</strong>, width: 100 },
    { field: 'price', renderHeader: () => <strong>Price</strong>, width: 50 },
    { field: 'free', renderHeader: () => <strong>Free</strong>, width: 50 },
    { field: 'summary', renderHeader: () => <strong>Summary</strong>, width: 200 },
    { field: 'url', renderHeader: () => <strong>URL</strong>, width: 200 },
    { field: 'scoreText', renderHeader: () => <strong>Score Text</strong>, width: 100 },
    { field: 'score', renderHeader: () => <strong>Score</strong>, width: 100 },
    { field: 'source', renderHeader: () => <strong>Source</strong>, width: 100 },
    { field: 'installs', renderHeader: () => <strong>Installs</strong>, width: 100 },
    { field: 'maxInstalls', renderHeader: () => <strong>Max Installs</strong>, width: 100 },
    { field: 'ratings', renderHeader: () => <strong>Ratings</strong>, width: 100 },
    { field: 'originalPrice', renderHeader: () => <strong>Original Price</strong>, width: 100, renderCell: (params) => params.value ? params.value : "-"},
    { field: 'discountEndDate', renderHeader: () => <strong>Discount End Date</strong>, width: 150, renderCell: (params) => params.value ? params.value : "-"},
    { field: 'available', renderHeader: () => <strong>Available</strong>, width: 70 },
    { field: 'offersIAP', renderHeader: () => <strong>Offers IAP</strong>, width: 80 },
    { field: 'IAPRange', renderHeader: () => <strong>IAP Range</strong>, width: 200 },
    { field: 'androidVersion', renderHeader: () => <strong>Android Version</strong>, width: 120 },
    { field: 'androidMaxVersion', renderHeader: () => <strong>Android Max Version</strong>, width: 150 },
    { field: 'developerId', renderHeader: () => <strong>Developer Id</strong>, width: 200 },
    { field: 'developerEmail', renderHeader: () => <strong>Developer Email</strong>, width: 200 },
    { field: 'developerWebsite', renderHeader: () => <strong>Developer Website</strong>, width: 200 },
    { field: 'developerAddress', renderHeader: () => <strong>Developer Address</strong>, width: 200 },
    { field: 'privacyPolicy', renderHeader: () => <strong>Privacy Policy</strong>, width: 200 },
    { field: 'genre', renderHeader: () => <strong>Genre</strong>, width: 150 },
    { field: 'genreId', renderHeader: () => <strong>Genre Id</strong>, width: 200 },
    { field: 'previewVideo', renderHeader: () => <strong>Preview Video</strong>, width: 100, renderCell: (params) => params.value ? params.value : "-"},
    { field: 'contentRating', renderHeader: () => <strong>Content Rating</strong>, width: 120 },
    { field: 'adSupported', renderHeader: () => <strong>Ad Supported</strong>, width: 100 },
    { field: 'released', renderHeader: () => <strong>Released</strong>, width: 100 },
    { field: 'version', renderHeader: () => <strong>Version</strong>, width: 100 },
    { field: 'recentChanges', renderHeader: () => <strong>Recent Changes</strong>, width: 200 },

    { field: 'approximateLocation', renderHeader: () => <p class="permissions-headers" title="approximate location (network based)"><strong>Approximate location (network based)</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'preciseLocation', renderHeader: () => <p class="permissions-headers" title="precise location (GPS and network-based)"><strong>Precise location (GPS and network-based)</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'retrieveRunning', renderHeader: () => <p class="permissions-headers" title="retrieve running apps"><strong>Retrieve running apps</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'findAccounts', renderHeader: () => <p class="permissions-headers" title="find accounts on the device"><strong>Find accounts on the device</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'addRemoveAccounts', renderHeader: () => <p class="permissions-headers" title="add or remove accounts"><strong>Add or Remove Accounts</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readContact', renderHeader: () => <p class="permissions-headers" title="read your own contact card"><strong>Read your own Contact Card</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readCalendar', renderHeader: () => <p class="permissions-headers" title='read calendar events plus confidential information'><strong>Read calendar events plus confidential information</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'addModCalendar', renderHeader: () => <p class="permissions-headers" title='add or modify calendar events and send email to guests without owners knowledge'><strong> Add or modify calendar events and send email to guests without owners knowledge</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readContacts', renderHeader: () => <p class="permissions-headers" title="read your contacts"><strong>Read Your Contacts</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'modifyContacts', renderHeader: () => <p class="permissions-headers" title="modify your contacts"><strong>Modify Your Contacts</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readCallLog', renderHeader: () => <p class="permissions-headers" title='read call log'><strong>Read call log</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'directCall', renderHeader: () => <p class="permissions-headers" title='directly call phone numbers'><strong>Directly call phone numbers</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readPhoneStatus', renderHeader: () => <p class="permissions-headers" title='read phone status'><strong>Read phone status and identity</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
    { field: 'readUSB', renderHeader: () => <p class="permissions-headers" title='read the contents of your USB storage'><strong>Read the contents of your USB storage</strong></p>,width: 200, renderCell: (params) => params.value ? <CheckIcon color="success"/> : <CloseIcon color="error"/>},
];